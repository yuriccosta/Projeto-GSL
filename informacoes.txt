Como utilizar a biblioteca para gerar números aleatórios:
    Dois structs especiais são utilizados:
        gsl_rng_type = que contém informações estáticas sobre cada tipo de gerador
        gsl_rng = que descreve a instancia de um gerador criado pelo gsl_rng_type
    
    Inicialização dos geradores:
        1° Alocar memória para a instância
            gsl_rng * gsl_rng_alloc ( const gsl_rng_type * T ) = Retorna um ponteiro para uma instância do Tipo "T"
            Exemplo: gsl_rng * r = gsl_rng_alloc (gsl_rng_taus); Cria uma instância do gerador de Tausworthe

            Se não tiver memória suficiente retorna um ponteiro nulo e chama o gerenciador de erros com o código GSL_ENOMEM
            O gerador é inicializado com a seed padrão (gsl_rng_default_seed). Que é zero, mas pode ser mudada diretamente ou usando a variável
            de ambiente GSL_RNG_SEED

        2° Alimentando o gerador de números aleatórios
            void gsl_rng_set(const gsl_rng *r, unsigned long int s) = Inicializa o gerador, se já estiver alimentado com o mesmo valor de s em duas
            execuções diferentes o mesmo fluxo de números será gerado. Se a semente s é zero então é utilizado a semente padrão de acordo com o tipo
            do gerador utilizado.

            A maioria dos geradores aceita sementes de apenas 32 bits.

    Gerando os números (funções):
        Todas as funções descritas aqui são uniformemente distribuidas

        unsigned long int gsl_rng_get(const gsl_rng *r)
            Retorna um número aleatório do gerador r. O valor mínimo e o valor máximo dependem do algoritmo utilizado
            Os valores mínimos e máximos são determindados utilizando as funções auxiliares:
                gsl_rng_max()
                gsl_rng_min()
        
        double gsl_rng_uniform(const gsl_rng *r)
            Retorna um double de 0 até 1 [0,1) "Inclui o 0.0 e exclui o 1.0" Normalmente é obtido dividindo o resultado de 
            gsl_rng_get(r) por ggsl(rn_max(r)) + 1.0 (Isso ocorre porque a medida que se aumenta o valor de um número e divide pelo seu próximo
            o resultado vai se aproximando até que seja 1 {Provavelmente estoura a o tamaho do número, verificar depois})

        double gsl_rng_uniform_pos(const gsl_rng *r)
            Retorna um double de 0 até 1 (0,1) "Exclui o 0.0 e o 1.0". O número é obtdio chamando gsl_rng_uniform() até que se obtenha um valor não nulo

        unsigned long int gsl_rng_uniform_int(const gsl_rng *r, unsigned long int n)
            Retorna um número inteiro de 0 até n - 1 [0, n - 1]. Para geradores com valor mínimo diferente de zero, um deslocamente é aplicado
            para que zero seja retornado com a probabilidade correta. O parâmetro n deve ser menor ou igual ao alcance do gerador r. Se o n for maior que
            o alcance, a função chama o manipulador de erros com o código GSL_EINVAL e retorna zero. Essa função não foi feita para gerar toda a gama de
            valores inteiros sem sinal [0, 2³² - 1]. A documentação recomenda utilizar um gerador que tenha o intervalo de zero até o maior inteiro
            como gsl_rng_ranlxd1, gsl_rng_mt19937ou gsl_rng_taus e usar no gsl_rng_get

    Funções auxiliares:
        const char *gsl_rng_name(const gsl_rng *r)
            Retorna um ponteiro para o nome do gerador. Por exemplo:
            printf ("r é um gerador '%s'\n", gsl_rng_name (r)); Deveria mostrar algo como:
            r é um gerador 'taus'

        unsigned long int gsl_rng_max(const gsl_rng *r)
            Retorna o maior valor que gsl_rng_get() consegue retornar. Note que isso vai depender do tipo do gerador que for passado como parâmetro
        
        unsigned long int gsl_rng_min(const gsl_rng *r)
            Retorna o menor valor que gsl_rng_get() consegue retornar. Geralmente é zero, mas existem alguns que não conseguem retornar zero e para esses
            o menor valor é 1
        
        Essas funções juntas podem ser utilizadas para acessar o estado diretamente:
            void *gsl_rng_state(const gsl_rng *r)
                Retorna o ponteiro para o estado do gerador r
            size_t gsl_rng_size(const gsl_rng *r)
                Retorna o tamanho do gerador r
        
        const gsl_rng_type **gsl_rng_types_setup(void)
            Retorna um ponteiro para um array de todos os tipos de geradores disponíveis, ecerrado por um ponteiro NULL.
            Essa função deve ser chamada uma vez no começo do programa se for necessária.

    Variáveis de ambiente
        GSL_RNG_TYPE
            Esta variável de ambiente especifica o gerador de números aleatórios padrão. Deve ser o nome de um gerador, como tausou mt19937.

        GSL_RNG_SEED
            Esta variável de ambiente especifica a semente padrão para o aleatório gerador de números

        gsl_rng_type * gsl_rng_default
            Especifica o gerador padrão e pode ser inicializado de GSL_RNG_TYPE usando gsl_rng_env_setup
                extern const gsl_rng_type *gsl_rng_default
        
        unsigned long int gsl_rng_default_seed
            Especifica a semente para o gerador padrão e pode ser inicializado de GSL_RNG_SEED usando gsl_rng_env_setup
            É definido com zero por padrão
                extern unsigned long int gsl_rng_default_seed
        
        const gsl_rng_type *gsl_rng_env_setup(void)
            Lê as variáveis de ambiente  GSL_RNG_TYPE e GSL_RNG_SEED e usa seus valores para definir suas correspondentes
            variáveis da biblioteca gsl_rng_default e gsl_rng_default_seed.
            O valor de GSL_RNG_SEEDé convertido em um unsigned long int usando a função da biblioteca C strtoul().
            Se não especificar um gerador para GSL_RNG_TYPE então gsl_rng_mt19937 é usado como padrão. 
            O valor inicial de gsl_rng_default_seed é zero. Utilizando a linha de comando conseguimos definir o gerador padrão
            e a semente: $ GSL_RNG_TYPE="taus" GSL_RNG_SEED=123 ./executavel

    Copiando o estado dos geradores:
        Os métodos acima não mostram o estado do gerador, que muda de chamada pra chamada. Essa exposição pode ser útil para salvar
        e restaurar o estado anterior de um gerador. Para isso temos as funções abaixo:
        
        int gsl_rng_memcpy(gsl_rng *dest, const gsl_rng *src)
            Copia um gerador 'src' para um gerador já existente 'dest' fazendo uma cópia exata de src. Os dois geradores
            tem que ser do mesmo tipo
        
        gsl_rng *gsl_rng_clone(const gsl_rng *r)
            Retorna um ponteiro para um novo gerador criado, queé uma cópia exata do gerador r

    Lendo e escrevendo o estado do gerador para um arquivo binário
        int gsl_rng_fwrite(FILE *stream, const gsl_rng *r)
            Escreve o estado do gerador r para a stream no formato binário. Retorna 0 se foi sucedido e GSL_EFAILED caso contrário
            Como é escrita no formato binário nativa, o arquivo pode não ser portável para outras arquiteturas
        
        int gsl_rng_fread(FILE *stream, gsl_rng *r)
            Lê o estado do gerador r da strem no formato binário. O gerador r deve ser preinicializado com o gerador correto
            já que a informação do tipo não é salva. Retorna 0 se foi sucedido e GSL_EFAILED caso contrário

    Algoritmos de geradores aleatórios
        Os seguintes geradores são recomendados para uso em simulação. Eles têm períodos extremamente longos, baixa correlação 
        e passam na maioria dos testes de estatística . Para a fonte mais confiável de números não correlacionados 
        os geradores RANLUX de segunda geração têm a prova mais forte de aleatoriedade.

        Não teremos todos os algoritmos aqui, apenas alguns para exemplificar. Para saber todos os algoritmos possíveis tem a
        própria documentação e a função gsl_rng_types_setup(void)

        gsl_rng_type * gsl_rng_mt19937
        O gerador original usado uma semente padrão de 4357 e escolhendo sigual a zero em gsl_rng_set()reproduz isso. 
        Versões posteriores mudaram para 5489 como a semente padrão, você pode escolher isso explicitamente via gsl_rng_set() 
        em vez disso, se você precisar. 

        gsl_rng_type * gsl_rng_ranlxs0
        gsl_rng_type * gsl_rng_ranlxs1
        gsl_rng_type * gsl_rng_ranlxs2
            O gerador ranlxs0 é uma versão de segunda geração do Algoritmo RANLUX de Luscher, que produz “luxury aleatório números".
            Este gerador fornece saída de precisão única (24 bits) em três níveis de luxo ranlxs0, ranlxs1 e ranlxs2
            em ordem crescente de força. Ele usa aritmética de ponto flutuante de precisão dupla internamente e pode ser 
            significativamente mais rápido que a versão inteira do ranlux, particularmente em arquiteturas de 64 bits.
        
        gsl_rng_type *gsl_rng_ranlxd1
        gsl_rng_type *gsl_rng_ranlxd2
            Esses geradores produzem saída de precisão dupla (48 bits) do Gerador RANLXS. A biblioteca oferece dois níveis 
            de luxo ranlxd1 e ranlxd2, em ordem crescente de força.

        gsl_rng_type * gsl_rng_taus
        gsl_rng_type * gsl_rng_taus2 
            O taus2 deve ser usado em preferência ao taus
        
        gsl_rng_random_glibc2
            É o mesmo algoritmo de rand()

    Liberando memória:
        void gsl_rng_free ( gsl_rng * r ) = Libera a memória do gerador r
